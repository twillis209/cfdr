// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ecdf_cpp
NumericVector ecdf_cpp(NumericVector reference, NumericVector sample);
RcppExport SEXP _cfdr_ecdf_cpp(SEXP referenceSEXP, SEXP sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample(sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(ecdf_cpp(reference, sample));
    return rcpp_result_gen;
END_RCPP
}
// approx_cpp
NumericVector approx_cpp(NumericVector x, NumericVector y, NumericVector xout);
RcppExport SEXP _cfdr_approx_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    rcpp_result_gen = Rcpp::wrap(approx_cpp(x, y, xout));
    return rcpp_result_gen;
END_RCPP
}
// vl_mode2
List vl_mode2(NumericVector p, NumericVector q, IntegerVector indices, IntegerVector fold, bool adj, Nullable<NumericVector> at, int nt, int nv, double p_threshold, CharacterVector scale, bool closed, bool verbose, double gx);
RcppExport SEXP _cfdr_vl_mode2(SEXP pSEXP, SEXP qSEXP, SEXP indicesSEXP, SEXP foldSEXP, SEXP adjSEXP, SEXP atSEXP, SEXP ntSEXP, SEXP nvSEXP, SEXP p_thresholdSEXP, SEXP scaleSEXP, SEXP closedSEXP, SEXP verboseSEXP, SEXP gxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< bool >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type at(atSEXP);
    Rcpp::traits::input_parameter< int >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< int >::type nv(nvSEXP);
    Rcpp::traits::input_parameter< double >::type p_threshold(p_thresholdSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type closed(closedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type gx(gxSEXP);
    rcpp_result_gen = Rcpp::wrap(vl_mode2(p, q, indices, fold, adj, at, nt, nv, p_threshold, scale, closed, verbose, gx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cfdr_ecdf_cpp", (DL_FUNC) &_cfdr_ecdf_cpp, 2},
    {"_cfdr_approx_cpp", (DL_FUNC) &_cfdr_approx_cpp, 3},
    {"_cfdr_vl_mode2", (DL_FUNC) &_cfdr_vl_mode2, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_cfdr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
